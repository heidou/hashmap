package mengka.serializable_02;

import java.io.*;
import java.nio.ByteBuffer;
import mengka.serializable_02.flatbuffers.*;
import mengka.serializable_02.flatbuffers.MyGame.Example.*;

class JavaTest {
	
	public static void main(String[] args) {

		// First, let's test reading a FlatBuffer generated by C++ code:
		// This file was generated from monsterdata_test.json

		String path = "src//main//java//mengka//serializable_02//monsterdata_test.bin";

		byte[] data = null;
		File file = new File(path);
		RandomAccessFile f = null;
		try {
			f = new RandomAccessFile(file, "r");
			data = new byte[(int) f.length()];
			f.readFully(data);
			f.close();
		} catch (java.io.IOException e) {
			System.out.println("FlatBuffers test: couldn't read file");
			return;
		}

		// Now test it:

		ByteBuffer bb = ByteBuffer.wrap(data);
		TestBuffer(bb, 0);

		// Second, let's create a FlatBuffer from scratch in Java, and test it
		// also.
		// We use an initial size of 1 to exercise the reallocation algorithm,
		// normally a size larger than the typical FlatBuffer you generate would
		// be
		// better for performance.
		FlatBufferBuilder bufferBuilder = new FlatBufferBuilder(1);

		// We set up the same values as monsterdata.json:

		int str = bufferBuilder.createString("MyMonster");

		Monster.startInventoryVector(bufferBuilder, 5);
		for (byte i = 4; i >= 0; i--)
			bufferBuilder.addByte(i);
		int inv = bufferBuilder.endVector();

		Monster.startMonster(bufferBuilder);
		Monster.addHp(bufferBuilder, (short) 20);
		int mon2 = Monster.endMonster(bufferBuilder);

		Monster.startTest4Vector(bufferBuilder, 2);
		Test.createTest(bufferBuilder, (short) 10, (byte) 20);
		Test.createTest(bufferBuilder, (short) 30, (byte) 40);
		int test4 = bufferBuilder.endVector();

		Monster.startMonster(bufferBuilder);
		Monster.addPos(bufferBuilder, Vec3.createVec3(bufferBuilder, 1.0f, 2.0f, 3.0f, 3.0,
				(byte) 4, (short) 5, (byte) 6));
		Monster.addHp(bufferBuilder, (short) 80);
		Monster.addName(bufferBuilder, str);
		Monster.addInventory(bufferBuilder, inv);
		Monster.addTestType(bufferBuilder, (byte) 1);
		Monster.addTest(bufferBuilder, mon2);
		Monster.addTest4(bufferBuilder, test4);
		int mon = Monster.endMonster(bufferBuilder);

		bufferBuilder.finish(mon);

		// Write the result to a file for debugging purposes:
		// Note that the binaries are not necessarily identical, since the JSON
		// parser may serialize in a slightly different order than the above
		// Java code. They are functionally equivalent though.

		try {
			DataOutputStream os = new DataOutputStream(new FileOutputStream(
					"monsterdata_java_wire.bin"));
			os.write(bufferBuilder.dataBuffer().array(), bufferBuilder.dataStart(), bufferBuilder.offset());
			os.close();
		} catch (java.io.IOException e) {
			System.out.println("FlatBuffers test: couldn't write file");
			return;
		}

		// Test it:
		TestBuffer(bufferBuilder.dataBuffer(), bufferBuilder.dataStart());

		System.out.println("FlatBuffers test: completed successfully");
	}

	static void TestBuffer(ByteBuffer bb, int start) {
		Monster monster = Monster.getRootAsMonster(bb, start);

		String name = monster.name();
		
		System.out.println("hp = "+monster.hp());
		
		System.out.println("name = "+name);
		
		
//		TestEq(monster.hp(), (short) 80);
		TestEq(monster.mana(), (short) 150); // default

//		TestEq(monster.name(), "MyMonster");
		// monster.friendly() // can't access, deprecated

		Vec3 pos = monster.pos();
		TestEq(pos.x(), 1.0f);
		TestEq(pos.y(), 2.0f);
		TestEq(pos.z(), 3.0f);
		TestEq(pos.test1(), 3.0);
		TestEq(pos.test2(), (byte) 4);
		Test t = pos.test3();
		TestEq(t.a(), (short) 5);
		TestEq(t.b(), (byte) 6);

		TestEq(monster.testType(), (byte) Any.Monster);
		Monster monster2 = new Monster();
		TestEq(monster.test(monster2) != null, true);
		TestEq(monster2.hp(), (short) 20);

		TestEq(monster.inventoryLength(), 5);
		int invsum = 0;
		for (int i = 0; i < monster.inventoryLength(); i++)
			invsum += monster.inventory(i);
		TestEq(invsum, 10);

		Test test_0 = monster.test4(0);
		Test test_1 = monster.test4(1);
		TestEq(monster.test4Length(), 2);
		TestEq(test_0.a() + test_0.b() + test_1.a() + test_1.b(), 100);
	}

	static <T> void TestEq(T a, T b) {
		if (!a.equals(b)) {
			System.out.println("" + a.getClass().getName() + " "
					+ b.getClass().getName());
			System.out.println("FlatBuffers test FAILED: \'" + a + "\' != \'"
					+ b + "\'");
			assert false;
			System.exit(1);
		}
	}
}
